"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class JointState(object):

    __slots__ = ["size", "name", "position", "velocity", "effort"]

    __typenames__ = ["int16_t", "string", "float", "float", "float"]

    __dimensions__ = [None, ["size"], ["size"], ["size"], ["size"]]

    def __init__(self):
        self.size = 0
        """ LCM Type: int16_t """
        self.name = []
        """ LCM Type: string[size] """
        self.position = []
        """ LCM Type: float[size] """
        self.velocity = []
        """ LCM Type: float[size] """
        self.effort = []
        """ LCM Type: float[size] """

    def encode(self):
        buf = BytesIO()
        buf.write(JointState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.size))
        for i0 in range(self.size):
            __name_encoded = self.name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__name_encoded)+1))
            buf.write(__name_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%df' % self.size, *self.position[:self.size]))
        buf.write(struct.pack('>%df' % self.size, *self.velocity[:self.size]))
        buf.write(struct.pack('>%df' % self.size, *self.effort[:self.size]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != JointState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return JointState._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = JointState()
        self.size = struct.unpack(">h", buf.read(2))[0]
        self.name = []
        for i0 in range(self.size):
            __name_len = struct.unpack('>I', buf.read(4))[0]
            self.name.append(buf.read(__name_len)[:-1].decode('utf-8', 'replace'))
        self.position = struct.unpack('>%df' % self.size, buf.read(self.size * 4))
        self.velocity = struct.unpack('>%df' % self.size, buf.read(self.size * 4))
        self.effort = struct.unpack('>%df' % self.size, buf.read(self.size * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if JointState in parents: return 0
        tmphash = (0x607751ac511c6aaa) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if JointState._packed_fingerprint is None:
            JointState._packed_fingerprint = struct.pack(">Q", JointState._get_hash_recursive([]))
        return JointState._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", JointState._get_packed_fingerprint())[0]

